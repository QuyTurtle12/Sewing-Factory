// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SewingFactory.Repositories.DBContext;

#nullable disable

namespace SewingFactory.Repository.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240816094630_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SewingFactory.Models.Category", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("SewingFactory.Models.Group", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("SewingFactory.Models.Order", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("finishedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("orderDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("productID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("quantity")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("totalAmount")
                        .HasColumnType("float");

                    b.Property<Guid>("userID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("productID");

                    b.HasIndex("userID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SewingFactory.Models.Product", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("categoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("price")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("categoryID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("SewingFactory.Models.Role", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            ID = new Guid("474bde6d-decf-4a70-b660-1d5b35f93b39"),
                            name = "Cashier"
                        },
                        new
                        {
                            ID = new Guid("b993825b-8b6f-45ce-984a-52c0d7c601aa"),
                            name = "Order Manager"
                        },
                        new
                        {
                            ID = new Guid("c956dcdc-6e00-4285-b605-5eb7877638b9"),
                            name = "Product Manager"
                        },
                        new
                        {
                            ID = new Guid("5143d0e9-733c-45e8-a6e8-cdac75ee17f5"),
                            name = "Staff Manager"
                        },
                        new
                        {
                            ID = new Guid("bbb84064-85bf-491b-99d9-b0c1bfcd83e7"),
                            name = "Sewing Staff"
                        });
                });

            modelBuilder.Entity("SewingFactory.Models.Task", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("creatorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("groupID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("orderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("status")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("creatorID");

                    b.HasIndex("groupID");

                    b.HasIndex("orderID");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("SewingFactory.Models.User", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("groupID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("roleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("salary")
                        .HasColumnType("float");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("groupID");

                    b.HasIndex("roleID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SewingFactory.Models.Order", b =>
                {
                    b.HasOne("SewingFactory.Models.Product", "product")
                        .WithMany("orders")
                        .HasForeignKey("productID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SewingFactory.Models.User", "user")
                        .WithMany("orders")
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product");

                    b.Navigation("user");
                });

            modelBuilder.Entity("SewingFactory.Models.Product", b =>
                {
                    b.HasOne("SewingFactory.Models.Category", "category")
                        .WithMany("products")
                        .HasForeignKey("categoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");
                });

            modelBuilder.Entity("SewingFactory.Models.Task", b =>
                {
                    b.HasOne("SewingFactory.Models.User", "user")
                        .WithMany("tasks")
                        .HasForeignKey("creatorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SewingFactory.Models.Group", "group")
                        .WithMany("tasks")
                        .HasForeignKey("groupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SewingFactory.Models.Order", "order")
                        .WithMany("tasks")
                        .HasForeignKey("orderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("group");

                    b.Navigation("order");

                    b.Navigation("user");
                });

            modelBuilder.Entity("SewingFactory.Models.User", b =>
                {
                    b.HasOne("SewingFactory.Models.Group", "group")
                        .WithMany("users")
                        .HasForeignKey("groupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SewingFactory.Models.Role", "role")
                        .WithMany("users")
                        .HasForeignKey("roleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("group");

                    b.Navigation("role");
                });

            modelBuilder.Entity("SewingFactory.Models.Category", b =>
                {
                    b.Navigation("products");
                });

            modelBuilder.Entity("SewingFactory.Models.Group", b =>
                {
                    b.Navigation("tasks");

                    b.Navigation("users");
                });

            modelBuilder.Entity("SewingFactory.Models.Order", b =>
                {
                    b.Navigation("tasks");
                });

            modelBuilder.Entity("SewingFactory.Models.Product", b =>
                {
                    b.Navigation("orders");
                });

            modelBuilder.Entity("SewingFactory.Models.Role", b =>
                {
                    b.Navigation("users");
                });

            modelBuilder.Entity("SewingFactory.Models.User", b =>
                {
                    b.Navigation("orders");

                    b.Navigation("tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
